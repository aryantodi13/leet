class Solution {
            // Coin Change II - Leetcode 518 - DP
    public int change(int amount, int[] coins) {
        // Return number of ways you can come up with amount using values in coins[]
        // Count to be returned
        int[][] dp = new int[coins.length][amount + 1];
        for(int i = 0; i < dp.length; i ++) Arrays.fill(dp[i], -1);
        int c = countWays(amount, coins.length - 1, coins, dp);
        System.out.println("Number of ways : " + c);
        return c;
    }
    public int countWays(int target,int index, int[] coins, int[][] dp){
        // Base cases
        if(index == 0 && target % coins[index] == 0) return 1;
        else if(index == 0) return 0;

        // Recursive functions
        if(dp[index][target] != -1) return dp[index][target];
        int val = coins[index];
        int c1 = 0;
        int c2 = 0;
        //Take
        if(coins[index] <= target) c1 = countWays(target - val, index, coins, dp);
        //Not take
        c2 = countWays(target, index - 1, coins, dp);
        return dp[index][target] = c1 + c2;
        // DP
    }

}
